
-- 회원가입 시
1. password를 받아서 암호화 하고 DB에 저장

-- 로그인 시
1. 파라미터를 받은 아이디가 있는지 검사하고 있으면
   사용자가 로그인할때 입력한 암호(암호화X) => 암호화 변경 후
   DB에서 가져온 암호(암호화)와 비교해서 같으면 성공
   
주의) 암호된 암호는 복호화가 안됨

-- 설정방법
 1. pom.xml 에 라이브러리 설정
 spring-security-web, spring-security-core, spring-security-config
 
 	<!-- spring-security -->
		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>5.3.13.RELEASE</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>5.3.13.RELEASE</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>5.3.13.RELEASE</version>
 
 2. mail 처리하는 것 처럼 root-context.xml를 복사해서 security-context.xml 만들고
    네임스페이스에 security를 선택한다.
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
    
 3. web.xml
 	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/mail-context.xml
			/WEB-INF/spring/security-context.xml => 추가한다.
		</param-value>
	</context-param>